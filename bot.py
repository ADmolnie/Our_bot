from config import *
import telebot
import time
import sqlite3 
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from random import randint
from logic import Text2ImageAPI
from translate import Translator

bot = telebot.TeleBot(TOKEN)

translator = Translator(from_lang="en", to_lang="ru")
sent4 = ''
sent5 = ''
r = 0

def senf_info(bot, message, row):
    global sent4
    global sent5
        
    info = f"""
üìçTitle of movie:   {row[2]}
üìçYear:                   {row[3]}
üìçGenres:              {row[4]}
üìçRating IMDB:      {row[5]}


üîªüîªüîªüîªüîªüîªüîªüîªüîªüîªüîª
{row[6]}
"""     
    sent5 = row[6]
    if sent4 == "off":
        bot.send_photo(message.chat.id, row[1])
    else:
        prompt = {row[6]}
        api = Text2ImageAPI('https://api-key.fusionbrain.ai/', api_key, secret_key)
        model_id = api.get_model()
        uuid = api.generate(prompt, model_id)
        images = api.check_generation(uuid)[0]
        file_path = 'decoded_image.jpg'
        api.save_image(images, file_path)
        with open(file_path,'rb') as photo:
            bot.send_photo(message.chat.id, photo)
    bot.send_message(message.chat.id, info)


def main_markup():
  markup = ReplyKeyboardMarkup()
  markup.add(KeyboardButton('/random'))
  return markup


@bot.message_handler(commands=['trans'])
def trans(message):
    global r
    global translator
    global sent5
    if r > 0:
        translation = translator.translate(sent5)
        bot.send_message(message.chat.id, translation)
    else:
        bot.send_message(message.chat.id, " ")


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, """–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–∏–π –ö–∏–Ω–æ-–ß–∞—Ç-–ë–æ—Çüé•!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ 1000 —Ñ–∏–ª—å–º–æ–≤ üî•
–ù–∞–∂–º–∏—Ç–µ /random, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –µ–≥–æ –Ω–∞–π—Ç–∏! üé¨

!!!–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: /help, –∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º""", reply_markup=main_markup())


@bot.message_handler(commands=['random'])
def random_movie(message):
    global r
    r += 1
    con = sqlite3.connect("movie_database.db")
    with con:
        cur = con.cursor()
        cur.execute(f"SELECT * FROM movies ORDER BY RANDOM() LIMIT 1")
        row = cur.fetchall()[0]
        cur.close()
    senf_info(bot, message, row)


@bot.message_handler(commands=['help'])
def send_welcome(message):
    bot.send_message(message.chat.id, """ –Ø —Ç–µ–±–µ –ø–æ–º–æ–≥—É!!!

/genre - –ø–æ—Å–ª–µ —á–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–Ω—Ä –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, –ø–æ—Å–ª–µ —á–µ–≥–æ —Ç–µ–±–µ –≤—ã–¥–∞—Ç—É—Ç —Ñ–∏–ª—å–º —Å —ç—Ç–∏–º –∂–∞–Ω—Ä–æ–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–Ω—Ä–æ–≤, —Ç–æ –ø–∏—à–∏—Ç–µ –∫–∞–∂–¥—É—é —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
                     
/year - —á–∞–±–∞—Ä–Ω—É—Ç–∞—è —à—Ç—É–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞—ë—Ç —Ç–µ–±–µ —Ñ–∏–ª—å–º –ø–æ –¥–∞—Ç–µ –≤—ã–ø—É—Å–∫–∞ (–Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ç–∞–∫: –ø–∏—à–µ–º –º–Ω–∞—á–∞–ª–∞ –∑–Ω–∞–∫ >, < –∏–ª–∏ == –∑–∞—Ç–µ–º –ø–∏—à–µ–º –≥–æ–¥ (> 2009) –ø—Ä–æ–±–µ–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!!!)
                     
/rating - —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –ø–∏—à–µ–º –ø–æ—á—Ç–∏ —Ç–∞–∫–∂–µ, –∫–∞–∫ –∏ /year (–∑–Ω–∞–∫ >, < –∏–ª–∏ =, –∑–∞—Ç–µ–º –ø–∏—à–µ–º: —Ü–∏—Ñ—Ä–∞.—Ü–∏—Ñ—Ä–∞ (> 8.9))
                     
/random - –≤—ã–¥–∞—ë—Ç —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∏–ª—å–º
                     
/AI - –±—É–¥–µ—Ç –ª–∏ –ò–ò –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∞—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞(on)
                     
/trans - –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

–ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã –Ω–∞ –∏–Ω–≥–ª–∏—à
                     
–µ—Å–ª–∏ –ø–æ–¥—É–º–∞–ª–∏: –∞ –≥–¥–µ –∂–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ? –¢–æ –æ–±–ª–æ–º–∏—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —Å—Ä–∞–∑—É —Å–º–æ—Ç—Ä–∏—Ç–µ!
            
                –í–°–Å!""", reply_markup=main_markup())





@bot.message_handler(content_types=['text'])
def hello(message):
    if message.text == '/genre':
        sent1 = bot.send_message(message.from_user.id, "–ö–∞–∫–æ–≤?")
        bot.register_next_step_handler(sent1, genress)
    elif message.text == '/year':
        sent2 = bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π?")
        bot.register_next_step_handler(sent2, yearss)
    elif message.text == '/rating':
        sent3 = bot.send_message(message.from_user.id, "–ö–∞–∫–∏–≤?")
        bot.register_next_step_handler(sent3, ratingg)
    else: 
        if message.text == '/AI':
            sent4 = bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ on(–ò–ò -–ë–£–î–ï–¢- –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å), –∏–ª–∏ off(–ò–ò -–ù–ï –ë–£–î–ï–¢- –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å)")
            bot.register_next_step_handler(sent4, AI)


def genress(message):
    global r
    r += 1
    sent1 = message.text
    con = sqlite3.connect("movie_database.db")
    with con:
        cur = con.cursor()
        cur.execute(f"SELECT * FROM movies WHERE genre LIKE '%{sent1}%' ORDER BY RANDOM() LIMIT 1")
        row = cur.fetchall()[0]
        cur.close()
    senf_info(bot, message, row)


def yearss(message): 
    global r
    sent2 = message.text
    a = ''
    a1 = ''
    b = 0
    c = 0
    for i in sent2:
        if b == 1:
            a1 += str(i)
        if str(i) != ' ' and b == 0:
            a += str(i)
        elif i == ' ':
            b += 1
        else:
            pass
    d = a + ' ' + '"' + a1 + '"'
    bot.send_message(message.chat.id, d)
    if a != '>' or a != '<' or a != '==':
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π(–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–Ω–∞–∫)")
        bot.send_message(message.chat.id, a)
        bot.send_message(message.chat.id, a1)
    elif a == '>' and int(a1) > 2020:
        bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å –≥–æ–¥–æ–º –±–æ–ª—å—à–µ —á–µ–º 2020 –Ω–µ—Ç")
    elif a == '<' and int(a1) < 1920:
        bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å –≥–æ–¥–æ–º –º–µ–Ω—å—à–µ —á–µ–º 1920 –Ω–µ—Ç")
    else:
        r += 1
        con = sqlite3.connect("movie_database.db")
        with con:
            cur = con.cursor()
            cur.execute(f"SELECT * FROM movies WHERE year {d} ORDER BY RANDOM() LIMIT 1")
            row = cur.fetchall()[0]
            cur.close()
        senf_info(bot, message, row)


def ratingg(message):
    global r
    sent3 = message.text
    a = ''
    a1 = ''
    a2 = ' '
    b = 0
    c = 0
    for i in sent3:
        if b == 1:
            a1 += str(i)
        if str(i) != ' ' and b == 0:
            a += str(i)
        elif i == ' ':
            b += 1
        else:
            pass
    d = a + a2 + '"' + a1 + '"'
    if a != '>' or a != '<' or a != '=':
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π(–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–Ω–∞–∫)")
    elif a == '>' and a1 == '9.3':
        bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –±–æ–ª—å—à–µ —á–µ–º 9.3 –Ω–µ—Ç")
    elif a == '<' and a1 == '7.6':
        bot.send_message(message.chat.id, "–§–∏–ª—å–º —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –º–µ–Ω—å—à–µ —á–µ–º 7.6 –Ω–µ—Ç")
    else:
        r += 1
        con = sqlite3.connect("movie_database.db")
        with con:
            cur = con.cursor()
            cur.execute(f"SELECT * FROM movies WHERE rating {d} ORDER BY RANDOM() LIMIT 1")
            row = cur.fetchall()[0]
            cur.close()
        senf_info(bot, message, row)


def AI(message):
    global sent4
    sent4 = message.text
    if sent4 == 'off' or sent4 == 'on':
        bot.send_message(message.chat.id, "OKEY")
    else:
        bot.send_message(message.chat.id, "–î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π(–Ω–µ —Ç–æ—Ç –≤–∫–ª—é—á–∞—Ç–µ–ª—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å)")

    
@bot.message_handler(func=lambda message: True)
def echo_message(message):

    con = sqlite3.connect("movie_database.db")
    with con:
        cur = con.cursor()
        cur.execute(f"select * from movies where LOWER(title) = '{message.text.lower()}'")
        row = cur.fetchall()
        if row:
            row = row[0]
            bot.send_message(message.chat.id,"Of course! I know this movieüòå")
            senf_info(bot, message, row)
        else:
            bot.send_message(message.chat.id,"I don't know this movie ")

        cur.close()



bot.infinity_polling()